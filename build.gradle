buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://repo.jenkins-ci.org/releases/'
        }
    }
    dependencies {
        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.43.0'
    }
}

defaultTasks 'clean', 'jpi'

/**
=== Usage ===

gradlew jpi - Build the Jenkins plugin file, which can then be found in the build directory. The file will currently end in ".hpi".
gradlew server - Start a local instance of Jenkins (http://localhost:8080) with the plugin pre-installed for testing and debugging.
 */

ext.enforceJavaVersion = JavaVersion.VERSION_11

apply plugin: 'org.jenkins-ci.jpi'
apply from: "$rootDir/gradle/common.gradle"
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://repo.jenkins-ci.org/releases/'
    }
}

ext."jenkins.httpPort" = 8080

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

// Integration Test Structure
test {
    exclude '**/integration/**'
    reports {
        junitXml.enabled = false
        html.enabled = false
    }
}

task startJenkins(type: JenkinsServerTask, dependsOn: [jpi, test]){}

// task integTest(type: Test, dependsOn: startJenkins) {
//     testClassesDirs = sourceSets.test.output.classesDirs    // testClassesDirs (plural) not testClassesDir
//     // testClassesDirs = sourceSets.integrationTest.output.classesDirs
//     classpath = sourceSets.test.runtimeClasspath
//     include '**/integration/**'
//     outputs.upToDateWhen { false }
//     reports {
//         junitXml.enabled = false
//         html.enabled = false
//     }
// }

// check.dependsOn integTest

jenkinsPlugin {
    // always use latest LTS!
    coreVersion = '2.263.3'
    shortName = 'groovy-events-listener'
    displayName = jenkinsDisplayName

    def jenkinsDisplayNameEncoded = java.net.URLEncoder.encode(jenkinsDisplayName, "UTF-8")
    url = "https://wiki.jenkins-ci.org/display/JENKINS/$jenkinsDisplayNameEncoded"
    gitHubUrl = "https://github.com/jenkinsci/$project.name"
    compatibleSinceVersion = '1.20'
    fileExtension = 'hpi'
    developers {
        developer {
            id 'nickg'
            name 'Nick Grealy'
            email 'nickgrealy@gmail.com'
        }
    }
    configurePublishing = false
}

configurations { forceGroovy }

dependencies {
    forceGroovy "org.codehaus.groovy:groovy-all:2.4.12"
    implementation 'org.apache.ivy:ivy:2.4.0' // For @Grab

    testImplementation('org.hamcrest:hamcrest-core:1.3') { force = true }
    testImplementation('junit:junit:4.12') { force = true }
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation "info.cukes:cucumber-junit:1.2.4"
    testImplementation "info.cukes:cucumber-java:1.2.4"
    testImplementation "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
}

task deleteTarget(type: Delete) {
    delete 'target', 'out', 'work'
}

clean.dependsOn deleteTarget

jpi {
    classpath configurations.forceGroovy // add the Groovy lib to the plugin to make @Grab work
    manifest.attributes(["PluginFirstClassLoader": "true" ])
}

/**
 * We must exclude the junit-dep dependency, because it is clashing with junit when we run the AcceptanceTests.
 */
configurations.findAll {!it.name.endsWith('junit-dep')}.each { conf ->
    conf.exclude group: "junit", module: "junit-dep"
}


import java.nio.file.Files
import java.util.jar.JarFile
import org.jenkinsci.gradle.plugins.jpi.JpiExtension
import java.nio.file.StandardCopyOption

/**
 * Task that starts Jenkins in place with the current plugin.
 *
 * @author Kohsuke Kawaguchi
 */
class JenkinsServerTask extends DefaultTask {
    private static final String HTTP_PORT = 'jenkins.httpPort'

    @TaskAction
    def start() {

        def jenkinsWar = project.extensions.getByType(JpiExtension).jenkinsWarCoordinates
        Set<File> files = []
        if (jenkinsWar) {
            def c = project.configurations.detachedConfiguration(project.dependencies.create(jenkinsWar))
            files = c.resolve()
        }

        // def c = project.configurations.getByName(org.jenkinsci.gradle.plugins.jpi.JpiPlugin.WAR_DEPENDENCY_CONFIGURATION_NAME)
        // def files = c.resolve()
        if (files.isEmpty()) {
            throw new GradleException('No jenkins.war dependency is specified')
        }
        File war = files.toArray()[0]

        generateHpl()

        def conv = project.extensions.getByType(org.jenkinsci.gradle.plugins.jpi.JpiExtension)
        System.setProperty('JENKINS_HOME', conv.workDir.absolutePath)
        setSystemPropertyIfEmpty('stapler.trace', 'true')
        setSystemPropertyIfEmpty('stapler.jelly.noCache', 'true')
        setSystemPropertyIfEmpty('debug.YUI', 'true')

        List<String> args = []
        String port = project.properties[HTTP_PORT] ?: System.properties[HTTP_PORT]
        println "Using port: $port"
        if (port) {
            args << "--httpPort=${port}"
        }

        def cl = new URLClassLoader([war.toURI().toURL()] as URL[])
        def mainClass = new JarFile(war).manifest.mainAttributes.getValue('Main-Class')
        cl.loadClass(mainClass).main(args as String[])
    }

    private static void generateHpl() {
        def from = new File("build/libs/groovy-events-listener.hpi")
        def to = new File("work/plugins/groovy-events-listener.hpi")
        assert from.exists()
        to.parentFile.mkdirs()
        Files.copy(from.toPath(), to.toPath(), StandardCopyOption.REPLACE_EXISTING)
        println ">>> Copied file from '$from' to '$to'"
    }

    private static void setSystemPropertyIfEmpty(String name, String value) {
        if (!System.getProperty(name)) {
            System.setProperty(name, value)
        }
    }
}
