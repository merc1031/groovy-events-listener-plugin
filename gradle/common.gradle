apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'java'

idea.project?.vcs = 'Git'

ext {
    /* optional - set variable enforceJavaVersion */
    enforceVersionFlag = project.getProperties().containsKey('enforceJavaVersion')
    javaVersion = project.getProperties().get('enforceJavaVersion') ?: JavaVersion.VERSION_1_6
    compileTasks = [compileJava, compileGroovy]
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()
}

ext {
    groovyVersion = '2.4.12'
    customJvmArgs = ['-XX:MaxPermSize=128m', '-Xmx128m']
}

configurations {
    providedCompile
}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

task awrapper(type: Wrapper) {
    gradleVersion = '7.1'

    def jvmOpts = customJvmArgs.join(' ')
    inputs.property('jvmOpts', jvmOpts)
    doLast {
        def optsEnvVar = 'DEFAULT_JVM_OPTS'
        scriptFile.write scriptFile.text.replace("$optsEnvVar=\"\"", "$optsEnvVar=\"$jvmOpts\"")
        batchScript.write batchScript.text.replace("set $optsEnvVar=", "set $optsEnvVar=$jvmOpts")
    }
}

allprojects {
    clean {
        delete 'work'
        delete '.gradle'
    }

    tasks.withType(JavaCompile) {
        options.fork = true
        options.forkOptions.jvmArgs += customJvmArgs
    }

    tasks.withType(GroovyCompile) {
        configure(groovyOptions.forkOptions) {
            memoryMaximumSize = '256m'
            jvmArgs = customJvmArgs
        }
    }

    tasks.withType(Test) {
        jvmArgs(customJvmArgs)
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

subprojects {
    apply from: "$rootDir/gradle/idea.gradle"
}

// enforce version...

task enforceVersion {
    doLast {
        if (enforceVersionFlag){
            def foundVersion = JavaVersion.current()
            if (foundVersion != enforceJavaVersion){
                throw new IllegalStateException("Wrong Java version; required is $enforceJavaVersion, but found $foundVersion")
            }
        }
    }
}

compileTasks*.dependsOn(enforceVersion)

task showMeCache {
    doLast {
        configurations.compile.each { println it }
    }
}
